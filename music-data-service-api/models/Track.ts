/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Album } from './Album';
import {
    AlbumFromJSON,
    AlbumFromJSONTyped,
    AlbumToJSON,
} from './Album';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
} from './Asset';
import type { LocalizedField } from './LocalizedField';
import {
    LocalizedFieldFromJSON,
    LocalizedFieldFromJSONTyped,
    LocalizedFieldToJSON,
} from './LocalizedField';
import type { OriginalTrack } from './OriginalTrack';
import {
    OriginalTrackFromJSON,
    OriginalTrackFromJSONTyped,
    OriginalTrackToJSON,
} from './OriginalTrack';

/**
 * 
 * @export
 * @interface Track
 */
export interface Track {
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    id: string;
    /**
     * 
     * @type {LocalizedField}
     * @memberof Track
     */
    name: LocalizedField;
    /**
     * 
     * @type {number}
     * @memberof Track
     */
    index: number;
    /**
     * 
     * @type {number}
     * @memberof Track
     */
    disc: number;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    duration?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Track
     */
    genre?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Track
     */
    staff?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Track
     */
    arrangement?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Track
     */
    vocalist?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Track
     */
    lyricist?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Track
     */
    originalNonTouhou?: boolean | null;
    /**
     * 
     * @type {Album}
     * @memberof Track
     */
    album?: Album;
    /**
     * 
     * @type {Array<OriginalTrack>}
     * @memberof Track
     */
    original?: Array<OriginalTrack> | null;
    /**
     * 
     * @type {Asset}
     * @memberof Track
     */
    trackFile?: Asset;
}

/**
 * Check if a given object implements the Track interface.
 */
export function instanceOfTrack(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "index" in value;
    isInstance = isInstance && "disc" in value;

    return isInstance;
}

export function TrackFromJSON(json: any): Track {
    return TrackFromJSONTyped(json, false);
}

export function TrackFromJSONTyped(json: any, ignoreDiscriminator: boolean): Track {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': LocalizedFieldFromJSON(json['name']),
        'index': json['index'],
        'disc': json['disc'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'genre': !exists(json, 'genre') ? undefined : json['genre'],
        'staff': !exists(json, 'staff') ? undefined : json['staff'],
        'arrangement': !exists(json, 'arrangement') ? undefined : json['arrangement'],
        'vocalist': !exists(json, 'vocalist') ? undefined : json['vocalist'],
        'lyricist': !exists(json, 'lyricist') ? undefined : json['lyricist'],
        'originalNonTouhou': !exists(json, 'originalNonTouhou') ? undefined : json['originalNonTouhou'],
        'album': !exists(json, 'album') ? undefined : AlbumFromJSON(json['album']),
        'original': !exists(json, 'original') ? undefined : (json['original'] === null ? null : (json['original'] as Array<any>).map(OriginalTrackFromJSON)),
        'trackFile': !exists(json, 'trackFile') ? undefined : AssetFromJSON(json['trackFile']),
    };
}

export function TrackToJSON(value?: Track | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': LocalizedFieldToJSON(value.name),
        'index': value.index,
        'disc': value.disc,
        'duration': value.duration,
        'genre': value.genre,
        'staff': value.staff,
        'arrangement': value.arrangement,
        'vocalist': value.vocalist,
        'lyricist': value.lyricist,
        'originalNonTouhou': value.originalNonTouhou,
        'album': AlbumToJSON(value.album),
        'original': value.original === undefined ? undefined : (value.original === null ? null : (value.original as Array<any>).map(OriginalTrackToJSON)),
        'trackFile': AssetToJSON(value.trackFile),
    };
}

