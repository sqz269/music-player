/* tslint:disable */
/* eslint-disable */
/**
 * TlmcPlayerBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssetReadDto } from './AssetReadDto';
import {
    AssetReadDtoFromJSON,
    AssetReadDtoFromJSONTyped,
    AssetReadDtoToJSON,
} from './AssetReadDto';
import type { CircleReadDto } from './CircleReadDto';
import {
    CircleReadDtoFromJSON,
    CircleReadDtoFromJSONTyped,
    CircleReadDtoToJSON,
} from './CircleReadDto';
import type { LocalizedField } from './LocalizedField';
import {
    LocalizedFieldFromJSON,
    LocalizedFieldFromJSONTyped,
    LocalizedFieldToJSON,
} from './LocalizedField';
import type { ThumbnailReadDto } from './ThumbnailReadDto';
import {
    ThumbnailReadDtoFromJSON,
    ThumbnailReadDtoFromJSONTyped,
    ThumbnailReadDtoToJSON,
} from './ThumbnailReadDto';
import type { TrackReadDto } from './TrackReadDto';
import {
    TrackReadDtoFromJSON,
    TrackReadDtoFromJSONTyped,
    TrackReadDtoToJSON,
} from './TrackReadDto';

/**
 * 
 * @export
 * @interface AlbumReadDto
 */
export interface AlbumReadDto {
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    id?: string;
    /**
     * 
     * @type {LocalizedField}
     * @memberof AlbumReadDto
     */
    name?: LocalizedField;
    /**
     * 
     * @type {Date}
     * @memberof AlbumReadDto
     */
    releaseDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    releaseConvention?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    catalogNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof AlbumReadDto
     */
    numberOfDiscs?: number;
    /**
     * 
     * @type {number}
     * @memberof AlbumReadDto
     */
    discNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    discName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumReadDto
     */
    website?: Array<string>;
    /**
     * 
     * @type {Array<CircleReadDto>}
     * @memberof AlbumReadDto
     */
    albumArtist?: Array<CircleReadDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumReadDto
     */
    dataSource?: Array<string>;
    /**
     * 
     * @type {Array<TrackReadDto>}
     * @memberof AlbumReadDto
     */
    tracks?: Array<TrackReadDto>;
    /**
     * 
     * @type {Array<AlbumReadDto>}
     * @memberof AlbumReadDto
     */
    childAlbums?: Array<AlbumReadDto>;
    /**
     * 
     * @type {AlbumReadDto}
     * @memberof AlbumReadDto
     */
    parentAlbum?: AlbumReadDto;
    /**
     * 
     * @type {ThumbnailReadDto}
     * @memberof AlbumReadDto
     */
    thumbnail?: ThumbnailReadDto;
    /**
     * 
     * @type {Array<AssetReadDto>}
     * @memberof AlbumReadDto
     */
    otherFiles?: Array<AssetReadDto>;
}

/**
 * Check if a given object implements the AlbumReadDto interface.
 */
export function instanceOfAlbumReadDto(value: object): boolean {
    return true;
}

export function AlbumReadDtoFromJSON(json: any): AlbumReadDto {
    return AlbumReadDtoFromJSONTyped(json, false);
}

export function AlbumReadDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlbumReadDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : LocalizedFieldFromJSON(json['name']),
        'releaseDate': json['releaseDate'] == null ? undefined : (new Date(json['releaseDate'])),
        'releaseConvention': json['releaseConvention'] == null ? undefined : json['releaseConvention'],
        'catalogNumber': json['catalogNumber'] == null ? undefined : json['catalogNumber'],
        'numberOfDiscs': json['numberOfDiscs'] == null ? undefined : json['numberOfDiscs'],
        'discNumber': json['discNumber'] == null ? undefined : json['discNumber'],
        'discName': json['discName'] == null ? undefined : json['discName'],
        'website': json['website'] == null ? undefined : json['website'],
        'albumArtist': json['albumArtist'] == null ? undefined : ((json['albumArtist'] as Array<any>).map(CircleReadDtoFromJSON)),
        'dataSource': json['dataSource'] == null ? undefined : json['dataSource'],
        'tracks': json['tracks'] == null ? undefined : ((json['tracks'] as Array<any>).map(TrackReadDtoFromJSON)),
        'childAlbums': json['childAlbums'] == null ? undefined : ((json['childAlbums'] as Array<any>).map(AlbumReadDtoFromJSON)),
        'parentAlbum': json['parentAlbum'] == null ? undefined : AlbumReadDtoFromJSON(json['parentAlbum']),
        'thumbnail': json['thumbnail'] == null ? undefined : ThumbnailReadDtoFromJSON(json['thumbnail']),
        'otherFiles': json['otherFiles'] == null ? undefined : ((json['otherFiles'] as Array<any>).map(AssetReadDtoFromJSON)),
    };
}

export function AlbumReadDtoToJSON(value?: AlbumReadDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': LocalizedFieldToJSON(value['name']),
        'releaseDate': value['releaseDate'] == null ? undefined : ((value['releaseDate'] as any).toISOString()),
        'releaseConvention': value['releaseConvention'],
        'catalogNumber': value['catalogNumber'],
        'numberOfDiscs': value['numberOfDiscs'],
        'discNumber': value['discNumber'],
        'discName': value['discName'],
        'website': value['website'],
        'albumArtist': value['albumArtist'] == null ? undefined : ((value['albumArtist'] as Array<any>).map(CircleReadDtoToJSON)),
        'dataSource': value['dataSource'],
        'tracks': value['tracks'] == null ? undefined : ((value['tracks'] as Array<any>).map(TrackReadDtoToJSON)),
        'childAlbums': value['childAlbums'] == null ? undefined : ((value['childAlbums'] as Array<any>).map(AlbumReadDtoToJSON)),
        'parentAlbum': AlbumReadDtoToJSON(value['parentAlbum']),
        'thumbnail': ThumbnailReadDtoToJSON(value['thumbnail']),
        'otherFiles': value['otherFiles'] == null ? undefined : ((value['otherFiles'] as Array<any>).map(AssetReadDtoToJSON)),
    };
}

