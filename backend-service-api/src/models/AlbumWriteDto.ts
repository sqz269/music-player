/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocalizedField } from './LocalizedField';
import {
    LocalizedFieldFromJSON,
    LocalizedFieldFromJSONTyped,
    LocalizedFieldToJSON,
} from './LocalizedField';

/**
 * 
 * @export
 * @interface AlbumWriteDto
 */
export interface AlbumWriteDto {
    /**
     * 
     * @type {LocalizedField}
     * @memberof AlbumWriteDto
     */
    albumName: LocalizedField;
    /**
     * 
     * @type {Date}
     * @memberof AlbumWriteDto
     */
    releaseDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    releaseConvention?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    catalogNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof AlbumWriteDto
     */
    numberOfDiscs?: number;
    /**
     * 
     * @type {number}
     * @memberof AlbumWriteDto
     */
    discNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    discName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    website?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    albumArtist?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    genre?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    dataSource?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    albumImage?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    otherFiles?: Array<string>;
}

/**
 * Check if a given object implements the AlbumWriteDto interface.
 */
export function instanceOfAlbumWriteDto(value: object): boolean {
    if (!('albumName' in value)) return false;
    return true;
}

export function AlbumWriteDtoFromJSON(json: any): AlbumWriteDto {
    return AlbumWriteDtoFromJSONTyped(json, false);
}

export function AlbumWriteDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlbumWriteDto {
    if (json == null) {
        return json;
    }
    return {
        
        'albumName': LocalizedFieldFromJSON(json['albumName']),
        'releaseDate': json['releaseDate'] == null ? undefined : (new Date(json['releaseDate'])),
        'releaseConvention': json['releaseConvention'] == null ? undefined : json['releaseConvention'],
        'catalogNumber': json['catalogNumber'] == null ? undefined : json['catalogNumber'],
        'numberOfDiscs': json['numberOfDiscs'] == null ? undefined : json['numberOfDiscs'],
        'discNumber': json['discNumber'] == null ? undefined : json['discNumber'],
        'discName': json['discName'] == null ? undefined : json['discName'],
        'website': json['website'] == null ? undefined : json['website'],
        'albumArtist': json['albumArtist'] == null ? undefined : json['albumArtist'],
        'genre': json['genre'] == null ? undefined : json['genre'],
        'dataSource': json['dataSource'] == null ? undefined : json['dataSource'],
        'albumImage': json['albumImage'] == null ? undefined : json['albumImage'],
        'otherFiles': json['otherFiles'] == null ? undefined : json['otherFiles'],
    };
}

export function AlbumWriteDtoToJSON(value?: AlbumWriteDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'albumName': LocalizedFieldToJSON(value['albumName']),
        'releaseDate': value['releaseDate'] == null ? undefined : ((value['releaseDate'] as any).toISOString()),
        'releaseConvention': value['releaseConvention'],
        'catalogNumber': value['catalogNumber'],
        'numberOfDiscs': value['numberOfDiscs'],
        'discNumber': value['discNumber'],
        'discName': value['discName'],
        'website': value['website'],
        'albumArtist': value['albumArtist'],
        'genre': value['genre'],
        'dataSource': value['dataSource'],
        'albumImage': value['albumImage'],
        'otherFiles': value['otherFiles'],
    };
}

