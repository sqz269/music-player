/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PlaylistItemReadDto,
} from '../models/index';
import {
    PlaylistItemReadDtoFromJSON,
    PlaylistItemReadDtoToJSON,
} from '../models/index';

export interface AddTrackToPlaylistRequest {
    playlistId: string;
    requestBody?: Array<string>;
}

export interface DeleteTrackFromPlaylistRequest {
    playlistId: string;
    requestBody?: Array<string>;
}

export interface GetPlaylistItemsRequest {
    playlistId: string;
    start?: number;
    limit?: number;
}

export interface IsTrackInPlaylistRequest {
    playlistId: string;
    requestBody?: Array<string>;
}

/**
 * 
 */
export class PlaylistItemsApi extends runtime.BaseAPI {

    /**
     */
    async addTrackToPlaylistRaw(requestParameters: AddTrackToPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistItemReadDto>>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling addTrackToPlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}/tracks`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistItemReadDtoFromJSON));
    }

    /**
     */
    async addTrackToPlaylist(requestParameters: AddTrackToPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistItemReadDto>> {
        const response = await this.addTrackToPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTrackFromPlaylistRaw(requestParameters: DeleteTrackFromPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling deleteTrackFromPlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}/tracks`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTrackFromPlaylist(requestParameters: DeleteTrackFromPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTrackFromPlaylistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getPlaylistItemsRaw(requestParameters: GetPlaylistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistItemReadDto>>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling getPlaylistItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}/tracks`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistItemReadDtoFromJSON));
    }

    /**
     */
    async getPlaylistItems(requestParameters: GetPlaylistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistItemReadDto>> {
        const response = await this.getPlaylistItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async isTrackInPlaylistRaw(requestParameters: IsTrackInPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: boolean; }>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling isTrackInPlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}/contains`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async isTrackInPlaylist(requestParameters: IsTrackInPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: boolean; }> {
        const response = await this.isTrackInPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
