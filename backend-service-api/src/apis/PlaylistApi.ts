/* tslint:disable */
/* eslint-disable */
/**
 * TlmcPlayerBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PlaylistInfo,
  PlaylistReadDto,
} from '../models/index';
import {
    PlaylistInfoFromJSON,
    PlaylistInfoToJSON,
    PlaylistReadDtoFromJSON,
    PlaylistReadDtoToJSON,
} from '../models/index';

export interface AddPlaylistRequest {
    playlistInfo?: PlaylistInfo;
}

export interface ApiPlaylistsUserUserIdGetRequest {
    userId: string;
}

export interface DeletePlaylistRequest {
    playlistId: string;
}

export interface GetPlaylistByIdRequest {
    playlistId: string;
}

export interface UpdatePlaylistInfoRequest {
    playlistId: string;
    playlistInfo?: PlaylistInfo;
}

/**
 * 
 */
export class PlaylistApi extends runtime.BaseAPI {

    /**
     */
    async addPlaylistRaw(requestParameters: AddPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistInfoToJSON(requestParameters['playlistInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async addPlaylist(requestParameters: AddPlaylistRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.addPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPlaylistsUserUserIdGetRaw(requestParameters: ApiPlaylistsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiPlaylistsUserUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async apiPlaylistsUserUserIdGet(requestParameters: ApiPlaylistsUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.apiPlaylistsUserUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePlaylistRaw(requestParameters: DeletePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling deletePlaylist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePlaylist(requestParameters: DeletePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePlaylistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCurrentUserFavoriteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/me/favorite`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentUserFavorite(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.getCurrentUserFavoriteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserHistoryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/me/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentUserHistory(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.getCurrentUserHistoryRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserPlaylistsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async getCurrentUserPlaylists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.getCurrentUserPlaylistsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserQueueRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/me/queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentUserQueue(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.getCurrentUserQueueRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlaylistByIdRaw(requestParameters: GetPlaylistByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling getPlaylistById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPlaylistById(requestParameters: GetPlaylistByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.getPlaylistByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePlaylistInfoRaw(requestParameters: UpdatePlaylistInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        if (requestParameters['playlistId'] == null) {
            throw new runtime.RequiredError(
                'playlistId',
                'Required parameter "playlistId" was null or undefined when calling updatePlaylistInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/playlists/{playlistId}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters['playlistId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistInfoToJSON(requestParameters['playlistInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async updatePlaylistInfo(requestParameters: UpdatePlaylistInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.updatePlaylistInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
