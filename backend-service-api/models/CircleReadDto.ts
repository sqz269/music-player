/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CircleStatus } from './CircleStatus';
import {
    CircleStatusFromJSON,
    CircleStatusFromJSONTyped,
    CircleStatusToJSON,
} from './CircleStatus';
import type { CircleWebsiteReadDto } from './CircleWebsiteReadDto';
import {
    CircleWebsiteReadDtoFromJSON,
    CircleWebsiteReadDtoFromJSONTyped,
    CircleWebsiteReadDtoToJSON,
} from './CircleWebsiteReadDto';

/**
 * 
 * @export
 * @interface CircleReadDto
 */
export interface CircleReadDto {
    /**
     * 
     * @type {string}
     * @memberof CircleReadDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CircleReadDto
     */
    name?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CircleReadDto
     */
    alias?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof CircleReadDto
     */
    country?: string | null;
    /**
     * 
     * @type {Array<CircleWebsiteReadDto>}
     * @memberof CircleReadDto
     */
    website?: Array<CircleWebsiteReadDto> | null;
    /**
     * 
     * @type {CircleStatus}
     * @memberof CircleReadDto
     */
    status?: CircleStatus;
    /**
     * 
     * @type {Date}
     * @memberof CircleReadDto
     */
    established?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof CircleReadDto
     */
    dataSource?: Array<string> | null;
}

/**
 * Check if a given object implements the CircleReadDto interface.
 */
export function instanceOfCircleReadDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CircleReadDtoFromJSON(json: any): CircleReadDto {
    return CircleReadDtoFromJSONTyped(json, false);
}

export function CircleReadDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CircleReadDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'website': !exists(json, 'website') ? undefined : (json['website'] === null ? null : (json['website'] as Array<any>).map(CircleWebsiteReadDtoFromJSON)),
        'status': !exists(json, 'status') ? undefined : CircleStatusFromJSON(json['status']),
        'established': !exists(json, 'established') ? undefined : (new Date(json['established'])),
        'dataSource': !exists(json, 'dataSource') ? undefined : json['dataSource'],
    };
}

export function CircleReadDtoToJSON(value?: CircleReadDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'alias': value.alias,
        'country': value.country,
        'website': value.website === undefined ? undefined : (value.website === null ? null : (value.website as Array<any>).map(CircleWebsiteReadDtoToJSON)),
        'status': CircleStatusToJSON(value.status),
        'established': value.established === undefined ? undefined : (value.established.toISOString()),
        'dataSource': value.dataSource,
    };
}

