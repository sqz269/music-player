/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetReadDto } from './AssetReadDto';
import {
    AssetReadDtoFromJSON,
    AssetReadDtoFromJSONTyped,
    AssetReadDtoToJSON,
} from './AssetReadDto';
import type { CircleReadDto } from './CircleReadDto';
import {
    CircleReadDtoFromJSON,
    CircleReadDtoFromJSONTyped,
    CircleReadDtoToJSON,
} from './CircleReadDto';
import type { LocalizedField } from './LocalizedField';
import {
    LocalizedFieldFromJSON,
    LocalizedFieldFromJSONTyped,
    LocalizedFieldToJSON,
} from './LocalizedField';
import type { ThumbnailReadDto } from './ThumbnailReadDto';
import {
    ThumbnailReadDtoFromJSON,
    ThumbnailReadDtoFromJSONTyped,
    ThumbnailReadDtoToJSON,
} from './ThumbnailReadDto';
import type { TrackReadDto } from './TrackReadDto';
import {
    TrackReadDtoFromJSON,
    TrackReadDtoFromJSONTyped,
    TrackReadDtoToJSON,
} from './TrackReadDto';

/**
 * 
 * @export
 * @interface AlbumReadDto
 */
export interface AlbumReadDto {
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    id?: string;
    /**
     * 
     * @type {LocalizedField}
     * @memberof AlbumReadDto
     */
    albumName?: LocalizedField;
    /**
     * 
     * @type {Date}
     * @memberof AlbumReadDto
     */
    releaseDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    releaseConvention?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AlbumReadDto
     */
    catalogNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AlbumReadDto
     */
    numberOfDiscs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AlbumReadDto
     */
    discNumber?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumReadDto
     */
    website?: Array<string> | null;
    /**
     * 
     * @type {Array<CircleReadDto>}
     * @memberof AlbumReadDto
     */
    albumArtist?: Array<CircleReadDto> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumReadDto
     */
    dataSource?: Array<string> | null;
    /**
     * 
     * @type {Array<TrackReadDto>}
     * @memberof AlbumReadDto
     */
    tracks?: Array<TrackReadDto> | null;
    /**
     * 
     * @type {Array<AlbumReadDto>}
     * @memberof AlbumReadDto
     */
    childAlbums?: Array<AlbumReadDto> | null;
    /**
     * 
     * @type {AlbumReadDto}
     * @memberof AlbumReadDto
     */
    parentAlbum?: AlbumReadDto;
    /**
     * 
     * @type {ThumbnailReadDto}
     * @memberof AlbumReadDto
     */
    thumbnail?: ThumbnailReadDto;
    /**
     * 
     * @type {Array<AssetReadDto>}
     * @memberof AlbumReadDto
     */
    otherFiles?: Array<AssetReadDto> | null;
}

/**
 * Check if a given object implements the AlbumReadDto interface.
 */
export function instanceOfAlbumReadDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AlbumReadDtoFromJSON(json: any): AlbumReadDto {
    return AlbumReadDtoFromJSONTyped(json, false);
}

export function AlbumReadDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlbumReadDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'albumName': !exists(json, 'albumName') ? undefined : LocalizedFieldFromJSON(json['albumName']),
        'releaseDate': !exists(json, 'releaseDate') ? undefined : (json['releaseDate'] === null ? null : new Date(json['releaseDate'])),
        'releaseConvention': !exists(json, 'releaseConvention') ? undefined : json['releaseConvention'],
        'catalogNumber': !exists(json, 'catalogNumber') ? undefined : json['catalogNumber'],
        'numberOfDiscs': !exists(json, 'numberOfDiscs') ? undefined : json['numberOfDiscs'],
        'discNumber': !exists(json, 'discNumber') ? undefined : json['discNumber'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'albumArtist': !exists(json, 'albumArtist') ? undefined : (json['albumArtist'] === null ? null : (json['albumArtist'] as Array<any>).map(CircleReadDtoFromJSON)),
        'dataSource': !exists(json, 'dataSource') ? undefined : json['dataSource'],
        'tracks': !exists(json, 'tracks') ? undefined : (json['tracks'] === null ? null : (json['tracks'] as Array<any>).map(TrackReadDtoFromJSON)),
        'childAlbums': !exists(json, 'childAlbums') ? undefined : (json['childAlbums'] === null ? null : (json['childAlbums'] as Array<any>).map(AlbumReadDtoFromJSON)),
        'parentAlbum': !exists(json, 'parentAlbum') ? undefined : AlbumReadDtoFromJSON(json['parentAlbum']),
        'thumbnail': !exists(json, 'thumbnail') ? undefined : ThumbnailReadDtoFromJSON(json['thumbnail']),
        'otherFiles': !exists(json, 'otherFiles') ? undefined : (json['otherFiles'] === null ? null : (json['otherFiles'] as Array<any>).map(AssetReadDtoFromJSON)),
    };
}

export function AlbumReadDtoToJSON(value?: AlbumReadDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'albumName': LocalizedFieldToJSON(value.albumName),
        'releaseDate': value.releaseDate === undefined ? undefined : (value.releaseDate === null ? null : value.releaseDate.toISOString()),
        'releaseConvention': value.releaseConvention,
        'catalogNumber': value.catalogNumber,
        'numberOfDiscs': value.numberOfDiscs,
        'discNumber': value.discNumber,
        'website': value.website,
        'albumArtist': value.albumArtist === undefined ? undefined : (value.albumArtist === null ? null : (value.albumArtist as Array<any>).map(CircleReadDtoToJSON)),
        'dataSource': value.dataSource,
        'tracks': value.tracks === undefined ? undefined : (value.tracks === null ? null : (value.tracks as Array<any>).map(TrackReadDtoToJSON)),
        'childAlbums': value.childAlbums === undefined ? undefined : (value.childAlbums === null ? null : (value.childAlbums as Array<any>).map(AlbumReadDtoToJSON)),
        'parentAlbum': AlbumReadDtoToJSON(value.parentAlbum),
        'thumbnail': ThumbnailReadDtoToJSON(value.thumbnail),
        'otherFiles': value.otherFiles === undefined ? undefined : (value.otherFiles === null ? null : (value.otherFiles as Array<any>).map(AssetReadDtoToJSON)),
    };
}

