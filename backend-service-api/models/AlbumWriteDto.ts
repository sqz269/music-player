/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LocalizedField } from './LocalizedField';
import {
    LocalizedFieldFromJSON,
    LocalizedFieldFromJSONTyped,
    LocalizedFieldToJSON,
} from './LocalizedField';

/**
 * 
 * @export
 * @interface AlbumWriteDto
 */
export interface AlbumWriteDto {
    /**
     * 
     * @type {LocalizedField}
     * @memberof AlbumWriteDto
     */
    albumName: LocalizedField;
    /**
     * 
     * @type {Date}
     * @memberof AlbumWriteDto
     */
    releaseDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    releaseConvention?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    catalogNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AlbumWriteDto
     */
    numberOfDiscs?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    website?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    albumArtist?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    genre?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    dataSource?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AlbumWriteDto
     */
    albumImage?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumWriteDto
     */
    otherFiles?: Array<string> | null;
}

/**
 * Check if a given object implements the AlbumWriteDto interface.
 */
export function instanceOfAlbumWriteDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "albumName" in value;

    return isInstance;
}

export function AlbumWriteDtoFromJSON(json: any): AlbumWriteDto {
    return AlbumWriteDtoFromJSONTyped(json, false);
}

export function AlbumWriteDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlbumWriteDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'albumName': LocalizedFieldFromJSON(json['albumName']),
        'releaseDate': !exists(json, 'releaseDate') ? undefined : (json['releaseDate'] === null ? null : new Date(json['releaseDate'])),
        'releaseConvention': !exists(json, 'releaseConvention') ? undefined : json['releaseConvention'],
        'catalogNumber': !exists(json, 'catalogNumber') ? undefined : json['catalogNumber'],
        'numberOfDiscs': !exists(json, 'numberOfDiscs') ? undefined : json['numberOfDiscs'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'albumArtist': !exists(json, 'albumArtist') ? undefined : json['albumArtist'],
        'genre': !exists(json, 'genre') ? undefined : json['genre'],
        'dataSource': !exists(json, 'dataSource') ? undefined : json['dataSource'],
        'albumImage': !exists(json, 'albumImage') ? undefined : json['albumImage'],
        'otherFiles': !exists(json, 'otherFiles') ? undefined : json['otherFiles'],
    };
}

export function AlbumWriteDtoToJSON(value?: AlbumWriteDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'albumName': LocalizedFieldToJSON(value.albumName),
        'releaseDate': value.releaseDate === undefined ? undefined : (value.releaseDate === null ? null : value.releaseDate.toISOString()),
        'releaseConvention': value.releaseConvention,
        'catalogNumber': value.catalogNumber,
        'numberOfDiscs': value.numberOfDiscs,
        'website': value.website,
        'albumArtist': value.albumArtist,
        'genre': value.genre,
        'dataSource': value.dataSource,
        'albumImage': value.albumImage,
        'otherFiles': value.otherFiles,
    };
}

