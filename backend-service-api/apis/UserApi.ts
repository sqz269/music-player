/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginResult,
  OkResult,
  ProblemDetails,
  User,
  UserCredentialsDto,
} from '../models';
import {
    LoginResultFromJSON,
    LoginResultToJSON,
    OkResultFromJSON,
    OkResultToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserFromJSON,
    UserToJSON,
    UserCredentialsDtoFromJSON,
    UserCredentialsDtoToJSON,
} from '../models';

export interface ApiUserLogoutPostRequest {
    body?: string;
}

export interface LoginRequest {
    userCredentialsDto?: UserCredentialsDto;
}

export interface RegisterRequest {
    userCredentialsDto?: UserCredentialsDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async apiUserLogoutPostRaw(requestParameters: ApiUserLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OkResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/user/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkResultFromJSON(jsonValue));
    }

    /**
     */
    async apiUserLogoutPost(requestParameters: ApiUserLogoutPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OkResult> {
        const response = await this.apiUserLogoutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/user/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async getAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.getAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCredentialsDtoToJSON(requestParameters.userCredentialsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResultFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResult> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCredentialsDtoToJSON(requestParameters.userCredentialsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async register(requestParameters: RegisterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
