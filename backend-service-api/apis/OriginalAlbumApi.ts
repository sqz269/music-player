/* tslint:disable */
/* eslint-disable */
/**
 * AuthenticationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OriginalAlbumReadDto,
  OriginalAlbumReadDtoActionResult,
  OriginalAlbumWriteDto,
  OriginalTrackReadDto,
  OriginalTrackReadDtoActionResult,
  OriginalTrackWriteDto,
} from '../models';
import {
    OriginalAlbumReadDtoFromJSON,
    OriginalAlbumReadDtoToJSON,
    OriginalAlbumReadDtoActionResultFromJSON,
    OriginalAlbumReadDtoActionResultToJSON,
    OriginalAlbumWriteDtoFromJSON,
    OriginalAlbumWriteDtoToJSON,
    OriginalTrackReadDtoFromJSON,
    OriginalTrackReadDtoToJSON,
    OriginalTrackReadDtoActionResultFromJSON,
    OriginalTrackReadDtoActionResultToJSON,
    OriginalTrackWriteDtoFromJSON,
    OriginalTrackWriteDtoToJSON,
} from '../models';

export interface AddOriginalAlbumRequest {
    originalAlbumWriteDto?: OriginalAlbumWriteDto;
}

export interface AddOriginalTrackRequest {
    albumId: string;
    originalTrackWriteDto?: OriginalTrackWriteDto;
}

export interface GetOriginalAlbumRequest {
    id: string;
}

export interface GetOriginalAlbumsRequest {
    start?: number;
    limit?: number;
}

export interface GetOriginalTrackRequest {
    id: string;
}

export interface GetOriginalTracksRequest {
    start?: number;
    limit?: number;
}

/**
 * 
 */
export class OriginalAlbumApi extends runtime.BaseAPI {

    /**
     */
    async addOriginalAlbumRaw(requestParameters: AddOriginalAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OriginalAlbumReadDtoActionResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/source/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OriginalAlbumWriteDtoToJSON(requestParameters.originalAlbumWriteDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OriginalAlbumReadDtoActionResultFromJSON(jsonValue));
    }

    /**
     */
    async addOriginalAlbum(requestParameters: AddOriginalAlbumRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OriginalAlbumReadDtoActionResult> {
        const response = await this.addOriginalAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addOriginalTrackRaw(requestParameters: AddOriginalTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OriginalTrackReadDtoActionResult>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling addOriginalTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/source/album/{albumId}/track`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OriginalTrackWriteDtoToJSON(requestParameters.originalTrackWriteDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OriginalTrackReadDtoActionResultFromJSON(jsonValue));
    }

    /**
     */
    async addOriginalTrack(requestParameters: AddOriginalTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OriginalTrackReadDtoActionResult> {
        const response = await this.addOriginalTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOriginalAlbumRaw(requestParameters: GetOriginalAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OriginalAlbumReadDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOriginalAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/source/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OriginalAlbumReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOriginalAlbum(requestParameters: GetOriginalAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OriginalAlbumReadDto> {
        const response = await this.getOriginalAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOriginalAlbumsRaw(requestParameters: GetOriginalAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OriginalAlbumReadDto>>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/source/album`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OriginalAlbumReadDtoFromJSON));
    }

    /**
     */
    async getOriginalAlbums(requestParameters: GetOriginalAlbumsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OriginalAlbumReadDto>> {
        const response = await this.getOriginalAlbumsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOriginalTrackRaw(requestParameters: GetOriginalTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OriginalTrackReadDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOriginalTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/source/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OriginalTrackReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOriginalTrack(requestParameters: GetOriginalTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OriginalTrackReadDto> {
        const response = await this.getOriginalTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOriginalTracksRaw(requestParameters: GetOriginalTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OriginalTrackReadDto>>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/source/track`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OriginalTrackReadDtoFromJSON));
    }

    /**
     */
    async getOriginalTracks(requestParameters: GetOriginalTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OriginalTrackReadDto>> {
        const response = await this.getOriginalTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
