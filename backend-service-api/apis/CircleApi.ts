/* tslint:disable */
/* eslint-disable */
/**
 * AuthenticationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CircleReadDto,
} from '../models';
import {
    CircleReadDtoFromJSON,
    CircleReadDtoToJSON,
} from '../models';

export interface GetCircleByIdRequest {
    id: string;
}

export interface GetCircleByNameRequest {
    name: string;
}

export interface GetCirclesRequest {
    start?: number;
    limit?: number;
}

/**
 * 
 */
export class CircleApi extends runtime.BaseAPI {

    /**
     */
    async getCircleByIdRaw(requestParameters: GetCircleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircleReadDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCircleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/entity/circle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCircleById(requestParameters: GetCircleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircleReadDto> {
        const response = await this.getCircleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCircleByNameRaw(requestParameters: GetCircleByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircleReadDto>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getCircleByName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/entity/circle/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircleReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCircleByName(requestParameters: GetCircleByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircleReadDto> {
        const response = await this.getCircleByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCirclesRaw(requestParameters: GetCirclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CircleReadDto>>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/entity/circle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CircleReadDtoFromJSON));
    }

    /**
     */
    async getCircles(requestParameters: GetCirclesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CircleReadDto>> {
        const response = await this.getCirclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
