/* tslint:disable */
/* eslint-disable */
/**
 * AuthenticationService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlbumReadDto,
  AlbumReadDtoActionResult,
  AlbumWriteDto,
  TrackReadDto,
  TrackReadDtoActionResult,
  TrackWriteDto,
} from '../models';
import {
    AlbumReadDtoFromJSON,
    AlbumReadDtoToJSON,
    AlbumReadDtoActionResultFromJSON,
    AlbumReadDtoActionResultToJSON,
    AlbumWriteDtoFromJSON,
    AlbumWriteDtoToJSON,
    TrackReadDtoFromJSON,
    TrackReadDtoToJSON,
    TrackReadDtoActionResultFromJSON,
    TrackReadDtoActionResultToJSON,
    TrackWriteDtoFromJSON,
    TrackWriteDtoToJSON,
} from '../models';

export interface AddAlbumRequest {
    albumWriteDto?: AlbumWriteDto;
}

export interface AddTrackRequest {
    albumId: string;
    trackWriteDto?: TrackWriteDto;
}

export interface GetAlbumRequest {
    id: string;
}

export interface GetAlbumsRequest {
    start?: number;
    limit?: number;
}

export interface GetTrackRequest {
    id: string;
}

/**
 * 
 */
export class AlbumApi extends runtime.BaseAPI {

    /**
     */
    async addAlbumRaw(requestParameters: AddAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumReadDtoActionResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/music/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumWriteDtoToJSON(requestParameters.albumWriteDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumReadDtoActionResultFromJSON(jsonValue));
    }

    /**
     */
    async addAlbum(requestParameters: AddAlbumRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumReadDtoActionResult> {
        const response = await this.addAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addTrackRaw(requestParameters: AddTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackReadDtoActionResult>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling addTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/music/album/{albumId}/track`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackWriteDtoToJSON(requestParameters.trackWriteDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackReadDtoActionResultFromJSON(jsonValue));
    }

    /**
     */
    async addTrack(requestParameters: AddTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackReadDtoActionResult> {
        const response = await this.addTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAlbumRaw(requestParameters: GetAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumReadDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/music/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAlbum(requestParameters: GetAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumReadDto> {
        const response = await this.getAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAlbumsRaw(requestParameters: GetAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlbumReadDto>>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/music/album`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlbumReadDtoFromJSON));
    }

    /**
     */
    async getAlbums(requestParameters: GetAlbumsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlbumReadDto>> {
        const response = await this.getAlbumsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTrackRaw(requestParameters: GetTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackReadDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/music/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTrack(requestParameters: GetTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackReadDto> {
        const response = await this.getTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
