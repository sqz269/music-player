/* tslint:disable */
/* eslint-disable */
/**
 * MusicDataService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PlaylistCreateRequest,
  PlaylistReadDto,
} from '../models';
import {
    PlaylistCreateRequestFromJSON,
    PlaylistCreateRequestToJSON,
    PlaylistReadDtoFromJSON,
    PlaylistReadDtoToJSON,
} from '../models';

export interface CreatePlaylistRequest {
    playlistCreateRequest?: PlaylistCreateRequest;
}

export interface DeletePlaylistRequest {
    playlistId: string;
}

export interface GetPlaylistRequest {
    playlistId: string;
}

export interface GetUserPlaylistRequest {
    userId: string;
}

/**
 * 
 */
export class PlaylistApi extends runtime.BaseAPI {

    /**
     */
    async createPlaylistRaw(requestParameters: CreatePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistCreateRequestToJSON(requestParameters.playlistCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async createPlaylist(requestParameters: CreatePlaylistRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.createPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePlaylistRaw(requestParameters: DeletePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling deletePlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/{playlistId}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deletePlaylist(requestParameters: DeletePlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deletePlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserFavoriteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/user/me/favorite`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async getCurrentUserFavorite(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.getCurrentUserFavoriteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserHistoryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/user/me/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async getCurrentUserHistory(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.getCurrentUserHistoryRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserPlaylistRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/user/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async getCurrentUserPlaylist(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.getCurrentUserPlaylistRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentUserQueueRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/user/me/queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async getCurrentUserQueue(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.getCurrentUserQueueRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlaylistRaw(requestParameters: GetPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistReadDto>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling getPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/{playlistId}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPlaylist(requestParameters: GetPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistReadDto> {
        const response = await this.getPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserPlaylistRaw(requestParameters: GetUserPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistReadDto>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Jwt authentication
        }

        const response = await this.request({
            path: `/api/playlist/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
    }

    /**
     */
    async getUserPlaylist(requestParameters: GetUserPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistReadDto>> {
        const response = await this.getUserPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
