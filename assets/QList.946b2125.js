import { k as createComponent, N as useDarkProps, P as useDark, c as computed, h, l as hSlot, g as getCurrentInstance } from "./index.211189c8.js";
function sumDurations(durations) {
  let totalTime = 0;
  for (let duration of durations) {
    duration = duration.split(".")[0];
    const durationSplit = duration.split(":");
    let pow = 0;
    for (const segment of durationSplit.reverse()) {
      totalTime += parseInt(segment) * Math.pow(60, pow);
      pow++;
    }
  }
  return secondsToDuration(totalTime);
}
function pad(num, size) {
  let n = num.toString();
  while (n.length < size)
    n = "0" + n;
  return n;
}
function formatDuration(duration) {
  duration = duration.split(".")[0];
  return duration.split(":").slice(1).join(":");
}
function durationToSeconds(duration) {
  duration = duration.split(".")[0];
  const segments = duration.split(":");
  let seconds = 0;
  let pow = 0;
  segments.reverse().forEach((seg) => {
    seconds += Math.pow(60, pow) * parseInt(seg);
    pow++;
  });
  return seconds;
}
function secondsToDuration(seconds) {
  let totalTime = seconds;
  const totalHours = Math.floor(totalTime / 3600);
  totalTime -= 3600 * totalHours;
  const totalMin = Math.floor(totalTime / 60);
  totalTime -= 60 * totalMin;
  return `${pad(totalHours, 2)}:${pad(totalMin, 2)}:${pad(Math.floor(totalTime), 2)}`;
}
var QList = createComponent({
  name: "QList",
  props: {
    ...useDarkProps,
    bordered: Boolean,
    dense: Boolean,
    separator: Boolean,
    padding: Boolean,
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(props, { slots }) {
    const vm = getCurrentInstance();
    const isDark = useDark(props, vm.proxy.$q);
    const classes = computed(
      () => "q-list" + (props.bordered === true ? " q-list--bordered" : "") + (props.dense === true ? " q-list--dense" : "") + (props.separator === true ? " q-list--separator" : "") + (isDark.value === true ? " q-list--dark" : "") + (props.padding === true ? " q-list--padding" : "")
    );
    return () => h(props.tag, { class: classes.value }, hSlot(slots.default));
  }
});
export { QList as Q, sumDurations as a, durationToSeconds as d, formatDuration as f, secondsToDuration as s };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUUxpc3QuOTQ2YjIxMjUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9kdXJhdGlvblV0aWxzLnRzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9pdGVtL1FMaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3VtcyBhIGxpc3Qgb2YgZHVyYXRpb24gc3RyaW5ncyBpbnRvIG9uZSBkdXJhdGlvblxuICogQHBhcmFtIGR1cmF0aW9ucyBhIGxpc3Qgb2YgZHVyYXRpb24gc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN1bUR1cmF0aW9ucyhkdXJhdGlvbnM6IHN0cmluZ1tdKTogc3RyaW5nXG57XG4gIC8vIGNhbGN1bGF0ZSB0b3RhbCB0aW1lIGluIHNlY29uZHNcbiAgbGV0IHRvdGFsVGltZSA9IDA7XG4gIGZvciAobGV0IGR1cmF0aW9uIG9mIGR1cmF0aW9ucykge1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24uc3BsaXQoJy4nKVswXTtcbiAgICBjb25zdCBkdXJhdGlvblNwbGl0ID0gZHVyYXRpb24uc3BsaXQoJzonKVxuICAgIGxldCBwb3cgPSAwO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBkdXJhdGlvblNwbGl0LnJldmVyc2UoKSkge1xuICAgICAgdG90YWxUaW1lICs9IHBhcnNlSW50KHNlZ21lbnQpICogTWF0aC5wb3coNjAsIHBvdyk7XG4gICAgICBwb3crKztcbiAgICB9XG4gIH1cblxuICAvLyBjYWxjdWxhdGUgaG91clxuICAvLyBjb25zdCB0b3RhbEhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFRpbWUgLyAzNjAwKTtcbiAgLy8gdG90YWxUaW1lIC09IDM2MDAgKiB0b3RhbEhvdXJzO1xuICAvLyBjb25zdCB0b3RhbE1pbiA9IE1hdGguZmxvb3IodG90YWxUaW1lIC8gNjApO1xuICAvLyB0b3RhbFRpbWUgLT0gNjAgKiB0b3RhbE1pbjtcbiAgLy8gcmV0dXJuIGAke3BhZCh0b3RhbEhvdXJzLCAyKX06JHtwYWQodG90YWxNaW4sIDIpfToke3BhZCh0b3RhbFRpbWUsIDIpfWBcbiAgcmV0dXJuIHNlY29uZHNUb0R1cmF0aW9uKHRvdGFsVGltZSk7XG59XG5cbmZ1bmN0aW9uIHBhZChudW06IG51bWJlciwgc2l6ZTogbnVtYmVyKSB7XG4gIGxldCBuID0gbnVtLnRvU3RyaW5nKCk7XG4gIHdoaWxlIChuLmxlbmd0aCA8IHNpemUpIG4gPSAnMCcgKyBuO1xuICByZXR1cm4gbjtcbn1cblxuLyoqXG4gKiBGb3JtYXQgMDA6MDQ6MzUuNTQ2MDAwMCBkdXJhdGlvbiBpbnRvIDA0OjM1XG4gKiBAcGFyYW0gZHVyYXRpb24gdGhlIGR1cmF0aW9uIHN0cmluZ1xuICovXG5mdW5jdGlvbiBmb3JtYXREdXJhdGlvbihkdXJhdGlvbjogc3RyaW5nKTogc3RyaW5nXG57XG4gIGR1cmF0aW9uID0gZHVyYXRpb24uc3BsaXQoJy4nKVswXTtcbiAgcmV0dXJuIGR1cmF0aW9uLnNwbGl0KCc6Jykuc2xpY2UoMSkuam9pbignOicpXG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBnaXZlbiBhIGR1cmF0aW9uIHN0cmluZyBsaWtlIDAwOjA0OjM1LjU0NjAwMDBcbiAqIFRoZSBEZWNpbWFsIHBhcnQgd2lsbCBiZSBjdXQgb3V0XG4gKiBAcGFyYW0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIHN0cmluZ1xuICovXG5mdW5jdGlvbiBkdXJhdGlvblRvU2Vjb25kcyhkdXJhdGlvbjogc3RyaW5nKTogbnVtYmVyIHtcbiAgZHVyYXRpb24gPSBkdXJhdGlvbi5zcGxpdCgnLicpWzBdXG4gIGNvbnN0IHNlZ21lbnRzID0gZHVyYXRpb24uc3BsaXQoJzonKVxuICBsZXQgc2Vjb25kcyA9IDA7XG4gIGxldCBwb3cgPSAwO1xuICBzZWdtZW50cy5yZXZlcnNlKCkuZm9yRWFjaChzZWcgPT4ge1xuICAgIHNlY29uZHMgKz0gTWF0aC5wb3coNjAsIHBvdykgKiBwYXJzZUludChzZWcpO1xuICAgIHBvdysrO1xuICB9KVxuXG4gIHJldHVybiBzZWNvbmRzO1xufVxuXG4vKipcbiAqIENvbnZlcnQgIyBvZiBzZWNvbmRzIGludG8gYSBkdXJhdGlvbiBzdHJpbmcgSEg6TU06U1NcbiAqIEBwYXJhbSBzZWNvbmRzIFRoZSBudW1iZXIgb2Ygc2Vjb25kc1xuICovXG5mdW5jdGlvbiBzZWNvbmRzVG9EdXJhdGlvbihzZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xuICBsZXQgdG90YWxUaW1lID0gc2Vjb25kcztcbiAgY29uc3QgdG90YWxIb3VycyA9IE1hdGguZmxvb3IodG90YWxUaW1lIC8gMzYwMCk7XG4gIHRvdGFsVGltZSAtPSAzNjAwICogdG90YWxIb3VycztcbiAgY29uc3QgdG90YWxNaW4gPSBNYXRoLmZsb29yKHRvdGFsVGltZSAvIDYwKTtcbiAgdG90YWxUaW1lIC09IDYwICogdG90YWxNaW47XG4gIHJldHVybiBgJHtwYWQodG90YWxIb3VycywgMil9OiR7cGFkKHRvdGFsTWluLCAyKX06JHtwYWQoTWF0aC5mbG9vcih0b3RhbFRpbWUpLCAyKX1gXG59XG5cbmV4cG9ydCB7XG4gIGZvcm1hdER1cmF0aW9uLFxuICBzdW1EdXJhdGlvbnMsXG4gIGR1cmF0aW9uVG9TZWNvbmRzLFxuICBzZWNvbmRzVG9EdXJhdGlvblxufVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlL3VzZS1kYXJrLmpzJ1xuaW1wb3J0IHsgaFNsb3QgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL3JlbmRlci5qcydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FMaXN0JyxcblxuICBwcm9wczoge1xuICAgIC4uLnVzZURhcmtQcm9wcyxcblxuICAgIGJvcmRlcmVkOiBCb29sZWFuLFxuICAgIGRlbnNlOiBCb29sZWFuLFxuICAgIHNlcGFyYXRvcjogQm9vbGVhbixcbiAgICBwYWRkaW5nOiBCb29sZWFuLFxuXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGl2J1xuICAgIH1cbiAgfSxcblxuICBzZXR1cCAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKClcbiAgICBjb25zdCBpc0RhcmsgPSB1c2VEYXJrKHByb3BzLCB2bS5wcm94eS4kcSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtbGlzdCdcbiAgICAgICsgKHByb3BzLmJvcmRlcmVkID09PSB0cnVlID8gJyBxLWxpc3QtLWJvcmRlcmVkJyA6ICcnKVxuICAgICAgKyAocHJvcHMuZGVuc2UgPT09IHRydWUgPyAnIHEtbGlzdC0tZGVuc2UnIDogJycpXG4gICAgICArIChwcm9wcy5zZXBhcmF0b3IgPT09IHRydWUgPyAnIHEtbGlzdC0tc2VwYXJhdG9yJyA6ICcnKVxuICAgICAgKyAoaXNEYXJrLnZhbHVlID09PSB0cnVlID8gJyBxLWxpc3QtLWRhcmsnIDogJycpXG4gICAgICArIChwcm9wcy5wYWRkaW5nID09PSB0cnVlID8gJyBxLWxpc3QtLXBhZGRpbmcnIDogJycpXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IGgocHJvcHMudGFnLCB7IGNsYXNzOiBjbGFzc2VzLnZhbHVlIH0sIGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICB9XG59KVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxTQUFTLGFBQWEsV0FDdEI7QUFFRSxNQUFJLFlBQVk7QUFDaEIsV0FBUyxZQUFZLFdBQVc7QUFDbkIsZUFBQSxTQUFTLE1BQU0sR0FBRyxFQUFFO0FBQ3pCLFVBQUEsZ0JBQWdCLFNBQVMsTUFBTSxHQUFHO0FBQ3hDLFFBQUksTUFBTTtBQUNDLGVBQUEsV0FBVyxjQUFjLFdBQVc7QUFDN0MsbUJBQWEsU0FBUyxPQUFPLElBQUksS0FBSyxJQUFJLElBQUksR0FBRztBQUNqRDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBUUEsU0FBTyxrQkFBa0IsU0FBUztBQUNwQztBQUVBLFNBQVMsSUFBSSxLQUFhLE1BQWM7QUFDbEMsTUFBQSxJQUFJLElBQUk7QUFDWixTQUFPLEVBQUUsU0FBUztBQUFNLFFBQUksTUFBTTtBQUMzQixTQUFBO0FBQ1Q7QUFNQSxTQUFTLGVBQWUsVUFDeEI7QUFDYSxhQUFBLFNBQVMsTUFBTSxHQUFHLEVBQUU7QUFDeEIsU0FBQSxTQUFTLE1BQU0sR0FBRyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEtBQUssR0FBRztBQUM5QztBQU9BLFNBQVMsa0JBQWtCLFVBQTBCO0FBQ3hDLGFBQUEsU0FBUyxNQUFNLEdBQUcsRUFBRTtBQUN6QixRQUFBLFdBQVcsU0FBUyxNQUFNLEdBQUc7QUFDbkMsTUFBSSxVQUFVO0FBQ2QsTUFBSSxNQUFNO0FBQ0QsV0FBQSxRQUFBLEVBQVUsUUFBUSxDQUFPLFFBQUE7QUFDaEMsZUFBVyxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksU0FBUyxHQUFHO0FBQzNDO0FBQUEsRUFBQSxDQUNEO0FBRU0sU0FBQTtBQUNUO0FBTUEsU0FBUyxrQkFBa0IsU0FBeUI7QUFDbEQsTUFBSSxZQUFZO0FBQ2hCLFFBQU0sYUFBYSxLQUFLLE1BQU0sWUFBWSxJQUFJO0FBQzlDLGVBQWEsT0FBTztBQUNwQixRQUFNLFdBQVcsS0FBSyxNQUFNLFlBQVksRUFBRTtBQUMxQyxlQUFhLEtBQUs7QUFDbEIsU0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUMsS0FBSyxJQUFJLEtBQUssTUFBTSxTQUFTLEdBQUcsQ0FBQztBQUNsRjtBQ2xFQSxJQUFBLFFBQWUsZ0JBQWdCO0FBQUEsRUFDN0IsTUFBTTtBQUFBLEVBRU4sT0FBTztBQUFBLElBQ0wsR0FBRztBQUFBLElBRUgsVUFBVTtBQUFBLElBQ1YsT0FBTztBQUFBLElBQ1AsV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLElBRVQsS0FBSztBQUFBLE1BQ0gsTUFBTTtBQUFBLE1BQ04sU0FBUztBQUFBLElBQ1Y7QUFBQSxFQUNGO0FBQUEsRUFFRCxNQUFPLE9BQU8sRUFBRSxTQUFTO0FBQ3ZCLFVBQU0sS0FBSyxtQkFBb0I7QUFDL0IsVUFBTSxTQUFTLFFBQVEsT0FBTyxHQUFHLE1BQU0sRUFBRTtBQUV6QyxVQUFNLFVBQVU7QUFBQSxNQUFTLE1BQ3ZCLFlBQ0csTUFBTSxhQUFhLE9BQU8sc0JBQXNCLE9BQ2hELE1BQU0sVUFBVSxPQUFPLG1CQUFtQixPQUMxQyxNQUFNLGNBQWMsT0FBTyx1QkFBdUIsT0FDbEQsT0FBTyxVQUFVLE9BQU8sa0JBQWtCLE9BQzFDLE1BQU0sWUFBWSxPQUFPLHFCQUFxQjtBQUFBLElBQ2xEO0FBRUQsV0FBTyxNQUFNLEVBQUUsTUFBTSxLQUFLLEVBQUUsT0FBTyxRQUFRLFNBQVMsTUFBTSxNQUFNLE9BQU8sQ0FBQztBQUFBLEVBQ3pFO0FBQ0gsQ0FBQzs7In0=
