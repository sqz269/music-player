import { bm as exists, bn as BaseAPI, bo as JSONApiResponse, bp as RequiredError, aC as createDirective, bq as getPortalProxy, br as closePortals, aw as isKeyCode } from "./index.b3ce9310.js";
const PlaylistVisibility = {
  Public: "Public",
  Private: "Private",
  Unlisted: "Unlisted"
};
function PlaylistVisibilityFromJSON(json) {
  return PlaylistVisibilityFromJSONTyped(json);
}
function PlaylistVisibilityFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function PlaylistVisibilityToJSON(value) {
  return value;
}
function PlaylistCreateRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "name": value.name,
    "visibility": PlaylistVisibilityToJSON(value.visibility)
  };
}
function PlaylistItemReadDtoFromJSON(json) {
  return PlaylistItemReadDtoFromJSONTyped(json);
}
function PlaylistItemReadDtoFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "trackId": !exists(json, "trackId") ? void 0 : json["trackId"],
    "index": !exists(json, "index") ? void 0 : json["index"],
    "timesPlayed": !exists(json, "timesPlayed") ? void 0 : json["timesPlayed"],
    "dateAdded": !exists(json, "dateAdded") ? void 0 : new Date(json["dateAdded"])
  };
}
function PlaylistTypeFromJSON(json) {
  return PlaylistTypeFromJSONTyped(json);
}
function PlaylistTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function PlaylistReadDtoFromJSON(json) {
  return PlaylistReadDtoFromJSONTyped(json);
}
function PlaylistReadDtoFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": !exists(json, "id") ? void 0 : json["id"],
    "name": !exists(json, "name") ? void 0 : json["name"],
    "userId": !exists(json, "userId") ? void 0 : json["userId"],
    "username": !exists(json, "username") ? void 0 : json["username"],
    "visibility": !exists(json, "visibility") ? void 0 : PlaylistVisibilityFromJSON(json["visibility"]),
    "type": !exists(json, "type") ? void 0 : PlaylistTypeFromJSON(json["type"]),
    "lastModified": !exists(json, "lastModified") ? void 0 : new Date(json["lastModified"]),
    "numberOfTracks": !exists(json, "numberOfTracks") ? void 0 : json["numberOfTracks"],
    "tracks": !exists(json, "tracks") ? void 0 : json["tracks"] === null ? null : json["tracks"].map(PlaylistItemReadDtoFromJSON)
  };
}
class PlaylistApi extends BaseAPI {
  async apiPlaylistPostRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json-patch+json";
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: PlaylistCreateRequestToJSON(requestParameters.playlistCreateRequest)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
  }
  async apiPlaylistPost(requestParameters = {}, initOverrides) {
    const response = await this.apiPlaylistPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCurrentUserFavoriteRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist/user/me/favorite`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
  }
  async getCurrentUserFavorite(initOverrides) {
    const response = await this.getCurrentUserFavoriteRaw(initOverrides);
    return await response.value();
  }
  async getCurrentUserHistoryRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist/user/me/history`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
  }
  async getCurrentUserHistory(initOverrides) {
    const response = await this.getCurrentUserHistoryRaw(initOverrides);
    return await response.value();
  }
  async getCurrentUserPlaylistRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist/user/me`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
  }
  async getCurrentUserPlaylist(initOverrides) {
    const response = await this.getCurrentUserPlaylistRaw(initOverrides);
    return await response.value();
  }
  async getCurrentUserQueueRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist/user/me/queue`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
  }
  async getCurrentUserQueue(initOverrides) {
    const response = await this.getCurrentUserQueueRaw(initOverrides);
    return await response.value();
  }
  async getPlaylistRaw(requestParameters, initOverrides) {
    if (requestParameters.playlistId === null || requestParameters.playlistId === void 0) {
      throw new RequiredError("playlistId", "Required parameter requestParameters.playlistId was null or undefined when calling getPlaylist.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist/{playlistId}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => PlaylistReadDtoFromJSON(jsonValue));
  }
  async getPlaylist(requestParameters, initOverrides) {
    const response = await this.getPlaylistRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getUserPlaylistRaw(requestParameters, initOverrides) {
    if (requestParameters.userId === null || requestParameters.userId === void 0) {
      throw new RequiredError("userId", "Required parameter requestParameters.userId was null or undefined when calling getUserPlaylist.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/playlist/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistReadDtoFromJSON));
  }
  async getUserPlaylist(requestParameters, initOverrides) {
    const response = await this.getUserPlaylistRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
function getDepth(value) {
  if (value === false) {
    return 0;
  }
  if (value === true || value === void 0) {
    return 1;
  }
  const depth = parseInt(value, 10);
  return isNaN(depth) ? 0 : depth;
}
var ClosePopup = createDirective(
  {
    name: "close-popup",
    beforeMount(el, { value }) {
      const ctx = {
        depth: getDepth(value),
        handler(evt) {
          ctx.depth !== 0 && setTimeout(() => {
            const proxy = getPortalProxy(el);
            if (proxy !== void 0) {
              closePortals(proxy, evt, ctx.depth);
            }
          });
        },
        handlerKey(evt) {
          isKeyCode(evt, 13) === true && ctx.handler(evt);
        }
      };
      el.__qclosepopup = ctx;
      el.addEventListener("click", ctx.handler);
      el.addEventListener("keyup", ctx.handlerKey);
    },
    updated(el, { value, oldValue }) {
      if (value !== oldValue) {
        el.__qclosepopup.depth = getDepth(value);
      }
    },
    beforeUnmount(el) {
      const ctx = el.__qclosepopup;
      el.removeEventListener("click", ctx.handler);
      el.removeEventListener("keyup", ctx.handlerKey);
      delete el.__qclosepopup;
    }
  }
);
export { ClosePopup as C, PlaylistApi as P, PlaylistItemReadDtoFromJSON as a, PlaylistVisibility as b };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
