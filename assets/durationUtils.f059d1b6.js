function sumDurations(durations) {
  let totalTime = 0;
  for (let duration of durations) {
    duration = duration.split(".")[0];
    const durationSplit = duration.split(":");
    let pow = 0;
    for (const segment of durationSplit.reverse()) {
      totalTime += parseInt(segment) * Math.pow(60, pow);
      pow++;
    }
  }
  return secondsToDuration(totalTime);
}
function pad(num, size) {
  let n = num.toString();
  while (n.length < size)
    n = "0" + n;
  return n;
}
function formatDuration(duration) {
  duration = duration.split(".")[0];
  return duration.split(":").slice(1).join(":");
}
function durationToSeconds(duration) {
  duration = duration.split(".")[0];
  const segments = duration.split(":");
  let seconds = 0;
  let pow = 0;
  segments.reverse().forEach((seg) => {
    seconds += Math.pow(60, pow) * parseInt(seg);
    pow++;
  });
  return seconds;
}
function secondsToDuration(seconds) {
  let totalTime = seconds;
  const totalHours = Math.floor(totalTime / 3600);
  totalTime -= 3600 * totalHours;
  const totalMin = Math.floor(totalTime / 60);
  totalTime -= 60 * totalMin;
  return `${pad(totalHours, 2)}:${pad(totalMin, 2)}:${pad(Math.floor(totalTime), 2)}`;
}
export { sumDurations as a, durationToSeconds as d, formatDuration as f, secondsToDuration as s };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb25VdGlscy5mMDU5ZDFiNi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2R1cmF0aW9uVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdW1zIGEgbGlzdCBvZiBkdXJhdGlvbiBzdHJpbmdzIGludG8gb25lIGR1cmF0aW9uXG4gKiBAcGFyYW0gZHVyYXRpb25zIGEgbGlzdCBvZiBkdXJhdGlvbiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gc3VtRHVyYXRpb25zKGR1cmF0aW9uczogc3RyaW5nW10pOiBzdHJpbmdcbntcbiAgLy8gY2FsY3VsYXRlIHRvdGFsIHRpbWUgaW4gc2Vjb25kc1xuICBsZXQgdG90YWxUaW1lID0gMDtcbiAgZm9yIChsZXQgZHVyYXRpb24gb2YgZHVyYXRpb25zKSB7XG4gICAgZHVyYXRpb24gPSBkdXJhdGlvbi5zcGxpdCgnLicpWzBdO1xuICAgIGNvbnN0IGR1cmF0aW9uU3BsaXQgPSBkdXJhdGlvbi5zcGxpdCgnOicpXG4gICAgbGV0IHBvdyA9IDA7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIGR1cmF0aW9uU3BsaXQucmV2ZXJzZSgpKSB7XG4gICAgICB0b3RhbFRpbWUgKz0gcGFyc2VJbnQoc2VnbWVudCkgKiBNYXRoLnBvdyg2MCwgcG93KTtcbiAgICAgIHBvdysrO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNhbGN1bGF0ZSBob3VyXG4gIC8vIGNvbnN0IHRvdGFsSG91cnMgPSBNYXRoLmZsb29yKHRvdGFsVGltZSAvIDM2MDApO1xuICAvLyB0b3RhbFRpbWUgLT0gMzYwMCAqIHRvdGFsSG91cnM7XG4gIC8vIGNvbnN0IHRvdGFsTWluID0gTWF0aC5mbG9vcih0b3RhbFRpbWUgLyA2MCk7XG4gIC8vIHRvdGFsVGltZSAtPSA2MCAqIHRvdGFsTWluO1xuICAvLyByZXR1cm4gYCR7cGFkKHRvdGFsSG91cnMsIDIpfToke3BhZCh0b3RhbE1pbiwgMil9OiR7cGFkKHRvdGFsVGltZSwgMil9YFxuICByZXR1cm4gc2Vjb25kc1RvRHVyYXRpb24odG90YWxUaW1lKTtcbn1cblxuZnVuY3Rpb24gcGFkKG51bTogbnVtYmVyLCBzaXplOiBudW1iZXIpIHtcbiAgbGV0IG4gPSBudW0udG9TdHJpbmcoKTtcbiAgd2hpbGUgKG4ubGVuZ3RoIDwgc2l6ZSkgbiA9ICcwJyArIG47XG4gIHJldHVybiBuO1xufVxuXG4vKipcbiAqIEZvcm1hdCAwMDowNDozNS41NDYwMDAwIGR1cmF0aW9uIGludG8gMDQ6MzVcbiAqIEBwYXJhbSBkdXJhdGlvbiB0aGUgZHVyYXRpb24gc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdER1cmF0aW9uKGR1cmF0aW9uOiBzdHJpbmcpOiBzdHJpbmdcbntcbiAgZHVyYXRpb24gPSBkdXJhdGlvbi5zcGxpdCgnLicpWzBdO1xuICByZXR1cm4gZHVyYXRpb24uc3BsaXQoJzonKS5zbGljZSgxKS5qb2luKCc6Jylcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBzZWNvbmRzIGdpdmVuIGEgZHVyYXRpb24gc3RyaW5nIGxpa2UgMDA6MDQ6MzUuNTQ2MDAwMFxuICogVGhlIERlY2ltYWwgcGFydCB3aWxsIGJlIGN1dCBvdXRcbiAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGR1cmF0aW9uVG9TZWNvbmRzKGR1cmF0aW9uOiBzdHJpbmcpOiBudW1iZXIge1xuICBkdXJhdGlvbiA9IGR1cmF0aW9uLnNwbGl0KCcuJylbMF1cbiAgY29uc3Qgc2VnbWVudHMgPSBkdXJhdGlvbi5zcGxpdCgnOicpXG4gIGxldCBzZWNvbmRzID0gMDtcbiAgbGV0IHBvdyA9IDA7XG4gIHNlZ21lbnRzLnJldmVyc2UoKS5mb3JFYWNoKHNlZyA9PiB7XG4gICAgc2Vjb25kcyArPSBNYXRoLnBvdyg2MCwgcG93KSAqIHBhcnNlSW50KHNlZyk7XG4gICAgcG93Kys7XG4gIH0pXG5cbiAgcmV0dXJuIHNlY29uZHM7XG59XG5cbi8qKlxuICogQ29udmVydCAjIG9mIHNlY29uZHMgaW50byBhIGR1cmF0aW9uIHN0cmluZyBISDpNTTpTU1xuICogQHBhcmFtIHNlY29uZHMgVGhlIG51bWJlciBvZiBzZWNvbmRzXG4gKi9cbmZ1bmN0aW9uIHNlY29uZHNUb0R1cmF0aW9uKHNlY29uZHM6IG51bWJlcik6IHN0cmluZyB7XG4gIGxldCB0b3RhbFRpbWUgPSBzZWNvbmRzO1xuICBjb25zdCB0b3RhbEhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFRpbWUgLyAzNjAwKTtcbiAgdG90YWxUaW1lIC09IDM2MDAgKiB0b3RhbEhvdXJzO1xuICBjb25zdCB0b3RhbE1pbiA9IE1hdGguZmxvb3IodG90YWxUaW1lIC8gNjApO1xuICB0b3RhbFRpbWUgLT0gNjAgKiB0b3RhbE1pbjtcbiAgcmV0dXJuIGAke3BhZCh0b3RhbEhvdXJzLCAyKX06JHtwYWQodG90YWxNaW4sIDIpfToke3BhZChNYXRoLmZsb29yKHRvdGFsVGltZSksIDIpfWBcbn1cblxuZXhwb3J0IHtcbiAgZm9ybWF0RHVyYXRpb24sXG4gIHN1bUR1cmF0aW9ucyxcbiAgZHVyYXRpb25Ub1NlY29uZHMsXG4gIHNlY29uZHNUb0R1cmF0aW9uXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsU0FBUyxhQUFhLFdBQ3RCO0FBRUUsTUFBSSxZQUFZO0FBQ2hCLFdBQVMsWUFBWSxXQUFXO0FBQ25CLGVBQUEsU0FBUyxNQUFNLEdBQUcsRUFBRTtBQUN6QixVQUFBLGdCQUFnQixTQUFTLE1BQU0sR0FBRztBQUN4QyxRQUFJLE1BQU07QUFDQyxlQUFBLFdBQVcsY0FBYyxXQUFXO0FBQzdDLG1CQUFhLFNBQVMsT0FBTyxJQUFJLEtBQUssSUFBSSxJQUFJLEdBQUc7QUFDakQ7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQVFBLFNBQU8sa0JBQWtCLFNBQVM7QUFDcEM7QUFFQSxTQUFTLElBQUksS0FBYSxNQUFjO0FBQ2xDLE1BQUEsSUFBSSxJQUFJO0FBQ1osU0FBTyxFQUFFLFNBQVM7QUFBTSxRQUFJLE1BQU07QUFDM0IsU0FBQTtBQUNUO0FBTUEsU0FBUyxlQUFlLFVBQ3hCO0FBQ2EsYUFBQSxTQUFTLE1BQU0sR0FBRyxFQUFFO0FBQ3hCLFNBQUEsU0FBUyxNQUFNLEdBQUcsRUFBRSxNQUFNLENBQUMsRUFBRSxLQUFLLEdBQUc7QUFDOUM7QUFPQSxTQUFTLGtCQUFrQixVQUEwQjtBQUN4QyxhQUFBLFNBQVMsTUFBTSxHQUFHLEVBQUU7QUFDekIsUUFBQSxXQUFXLFNBQVMsTUFBTSxHQUFHO0FBQ25DLE1BQUksVUFBVTtBQUNkLE1BQUksTUFBTTtBQUNELFdBQUEsUUFBQSxFQUFVLFFBQVEsQ0FBTyxRQUFBO0FBQ2hDLGVBQVcsS0FBSyxJQUFJLElBQUksR0FBRyxJQUFJLFNBQVMsR0FBRztBQUMzQztBQUFBLEVBQUEsQ0FDRDtBQUVNLFNBQUE7QUFDVDtBQU1BLFNBQVMsa0JBQWtCLFNBQXlCO0FBQ2xELE1BQUksWUFBWTtBQUNoQixRQUFNLGFBQWEsS0FBSyxNQUFNLFlBQVksSUFBSTtBQUM5QyxlQUFhLE9BQU87QUFDcEIsUUFBTSxXQUFXLEtBQUssTUFBTSxZQUFZLEVBQUU7QUFDMUMsZUFBYSxLQUFLO0FBQ2xCLFNBQU8sR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLEtBQUssSUFBSSxLQUFLLE1BQU0sU0FBUyxHQUFHLENBQUM7QUFDbEY7OyJ9
