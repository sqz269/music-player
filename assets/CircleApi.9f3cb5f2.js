import { B as BaseAPI, bs as RequiredError, J as JSONApiResponse, bL as AlbumReadDtoFromJSON, bM as CircleReadDtoFromJSON } from "./index.f02977bc.js";
class CircleApi extends BaseAPI {
  async getCircleAlbumsByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === void 0) {
      throw new RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling getCircleAlbumsById.");
    }
    const queryParameters = {};
    if (requestParameters.start !== void 0) {
      queryParameters["start"] = requestParameters.start;
    }
    if (requestParameters.limit !== void 0) {
      queryParameters["limit"] = requestParameters.limit;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/entity/circle/{id}/albums`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => AlbumReadDtoFromJSON(jsonValue));
  }
  async getCircleAlbumsById(requestParameters, initOverrides) {
    const response = await this.getCircleAlbumsByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCircleAlbumsByNameRaw(requestParameters, initOverrides) {
    if (requestParameters.name === null || requestParameters.name === void 0) {
      throw new RequiredError("name", "Required parameter requestParameters.name was null or undefined when calling getCircleAlbumsByName.");
    }
    const queryParameters = {};
    if (requestParameters.start !== void 0) {
      queryParameters["start"] = requestParameters.start;
    }
    if (requestParameters.limit !== void 0) {
      queryParameters["limit"] = requestParameters.limit;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/entity/circle/{name}/albums`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(AlbumReadDtoFromJSON));
  }
  async getCircleAlbumsByName(requestParameters, initOverrides) {
    const response = await this.getCircleAlbumsByNameRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCircleByIdRaw(requestParameters, initOverrides) {
    if (requestParameters.id === null || requestParameters.id === void 0) {
      throw new RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling getCircleById.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/entity/circle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => CircleReadDtoFromJSON(jsonValue));
  }
  async getCircleById(requestParameters, initOverrides) {
    const response = await this.getCircleByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCircleByNameRaw(requestParameters, initOverrides) {
    if (requestParameters.name === null || requestParameters.name === void 0) {
      throw new RequiredError("name", "Required parameter requestParameters.name was null or undefined when calling getCircleByName.");
    }
    const queryParameters = {};
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/entity/circle/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => CircleReadDtoFromJSON(jsonValue));
  }
  async getCircleByName(requestParameters, initOverrides) {
    const response = await this.getCircleByNameRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async getCirclesRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.start !== void 0) {
      queryParameters["start"] = requestParameters.start;
    }
    if (requestParameters.limit !== void 0) {
      queryParameters["limit"] = requestParameters.limit;
    }
    const headerParameters = {};
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization");
    }
    const response = await this.request({
      path: `/api/entity/circle`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => jsonValue.map(CircleReadDtoFromJSON));
  }
  async getCircles(requestParameters = {}, initOverrides) {
    const response = await this.getCirclesRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
export { CircleApi as C };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
